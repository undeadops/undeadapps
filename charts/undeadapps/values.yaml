# Default values for undeadapps.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#
# Name is required for this helmchart
name: foo
# Namespace to deploy app into.  required
namespace: foobar

replicaCount: 1

image:
  repository: foobar
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

extraArgs: {}
#   argument1: value1
#   argument2: value2
#   booleanArg1:

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

iamRole:
  create: true
  name: foobarPatron
  description: ""
  sessionDuration: "" # default: 3600
  tags:
    environment: development
  oidcArn: "" # eg: "arn:aws:iam::303391922817:oidc-provider/oidc.eks.us-east-2.amazonaws.com/id/6B76A5FB41BB3CD0B3836D99595069F8"
  oidcURL: "" # eg: "oidc.eks.us-east-2.amazonaws.com/id/6B76A5FB41BB3CD0B3836D99595069F8"

iamPolicy:
  path: "/"
  description: ""
  policy: ""

# environment variables to load in. Nonsecrets
env:
  FOO: BAR
  PORT: 5000

# Kubernetes Secrets to load as environment variables
envFromSecrets: []
# envFromSecrets:
#   - dburi

# External Secrets to pull from AWS Secrets Manager
# Name here, should match whats used in envFromSecrets
externalSecrets: {}
# externalSecrets:
#   - secretName: dburi
#     remoteRefKey: env/appname/dburi

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## pod options for liveness and readiness probes
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
livenessProbe: {}
#  enabled: true
#  initialDelaySeconds: 120
#  path: /healthz
#  port: 8080
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 6
#  successThreshold: 1

readinessProbe: {}
#  enabled: true
#  initialDelaySeconds: 30
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 6
#  successThreshold: 1

## If using an HTTPS-terminating load-balancer, the probes may need to behave
## like the balancer to prevent HTTP 302 responses. According to the Kubernetes
## docs, 302 should be considered "successful", but this issue on GitHub
## (https://github.com/kubernetes/kubernetes/issues/47893) shows that it isn't.
##
# livenessProbeHeaders:
# - name: X-Forwarded-Proto
#   value: https
# readinessProbeHeaders:
# - name: X-Forwarded-Proto
#   value: https
livenessProbeHeaders: {}
readinessProbeHeaders: {}

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

s3bucket:
  name: ""
  encrypted: true
